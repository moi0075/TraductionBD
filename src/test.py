#!/usr/bin/env python3
"""
Webtoon static site generator (vertical scrolling)

Place this script next to your `outputs/translated_chapter` folder (or point --source to it),
then run it. It will generate a static site in the output folder (default: site_output).
"""
import argparse
import os
import shutil
import sys
from pathlib import Path
import html
import re

def natural_key(s: str):
    parts = re.split(r'(\d+)', s)
    key = [int(p) if p.isdigit() else p.lower() for p in parts]
    return key

def find_series(source: Path):
    series = [p for p in source.iterdir() if p.is_dir()]
    series.sort(key=lambda p: natural_key(p.name))
    return series

def find_chapters(series_dir: Path):
    subdirs = [p for p in series_dir.iterdir() if p.is_dir()]
    if subdirs:
        subdirs.sort(key=lambda p: natural_key(p.name))
        return subdirs
    imgs = [p for p in series_dir.iterdir() if p.is_file() and p.suffix.lower() in ('.png', '.jpg', '.jpeg', '.webp')]
    return [series_dir] if imgs else []

def list_images(chapter_dir: Path):
    imgs = [p for p in chapter_dir.iterdir() if p.is_file() and p.suffix.lower() in ('.png', '.jpg', '.jpeg', '.webp')]
    imgs.sort(key=lambda p: natural_key(p.name))
    return imgs

def ensure_dir(p: Path):
    p.mkdir(parents=True, exist_ok=True)

def copy_images(img_paths, dst_dir: Path):
    ensure_dir(dst_dir)
    copied = []
    for img in img_paths:
        dst = dst_dir / img.name
        shutil.copy2(img, dst)
        copied.append(dst)
    return copied

BASE_CSS = """
body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Arial;margin:0;background:#111;color:#eee}
.container{max-width:960px;margin:0 auto;padding:12px}
.header{display:flex;align-items:center;justify-content:space-between;margin-bottom:12px}
.series-list{display:flex;flex-wrap:wrap;gap:8px}
.series-card{background:#1b1b1b;padding:12px;border-radius:8px;text-decoration:none;color:inherit;display:block}
.chapter-list{list-style:none;padding:0}
.chapter-list li{margin:6px 0}
.img-page{width:100%;height:auto;display:block;margin:8px 0;box-shadow:0 4px 18px rgba(0,0,0,0.6)}
.navbar{display:flex;gap:8px;align-items:center}
.button{background:#2b6ef6;color:white;padding:8px 12px;border-radius:6px;text-decoration:none}
.footer{margin-top:24px;font-size:0.9em;opacity:0.8}
@media(max-width:700px){.container{padding:8px}}
"""

CHAPTER_HTML = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>{series} — {chapter_name}</title>
<style>{css}</style>
</head>
<body>
<div class="container">
  <div class="header">
    <div>
      <h2 style="margin:0">{series}</h2>
      <div style="font-size:0.9em;opacity:0.85">{chapter_name}</div>
    </div>
    <div class="navbar">
      <a class="button" href="{series_index_rel}">Series index</a>
      {prev_chap_link}
      {next_chap_link}
    </div>
  </div>
  <main>
    {images_html}
  </main>
  <div class="footer">Use arrow keys ↑↓ to navigate images, ←→ for chapters.</div>
</div>
<script>
let images = Array.from(document.querySelectorAll('.img-page'));
let currentIndex = 0;
function showIndex(i){
  currentIndex = Math.max(0, Math.min(images.length-1, i));
  const el = images[currentIndex];
  if(el) el.scrollIntoView({behavior:'smooth', block:'start'});
}
document.addEventListener('keydown', e=>{
  if(e.key==='ArrowDown') showIndex(currentIndex+1);
  if(e.key==='ArrowUp') showIndex(currentIndex-1);
  if(e.key==='ArrowLeft' && window.prevChap) location.href=window.prevChap;
  if(e.key==='ArrowRight' && window.nextChap) location.href=window.nextChap;
});
window.prevChap={prev_chap_url_js};
window.nextChap={next_chap_url_js};
</script>
</body>
</html>
"""

SERIES_INDEX_HTML = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>{series} — chapters</title>
<style>{css}</style>
</head>
<body>
<div class="container">
  <div class="header">
    <div>
      <h2 style="margin:0">{series}</h2>
      <div style="font-size:0.95em;opacity:0.85">Chapters</div>
    </div>
    <div class="navbar">
      <a class="button" href="{root_index_rel}">Home</a>
    </div>
  </div>
  <ul class="chapter-list">
    {chapters_li}
  </ul>
  <div class="footer">Generated by webtoon_site_generator.py</div>
</div>
</body>
</html>
"""

ROOT_INDEX_HTML = """
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Webtoon Reader</title>
<style>{css}</style>
</head>
<body>
<div class="container">
  <div class="header">
    <h1 style="margin:0">Webtoon Reader</h1>
    <div class="navbar"><span class="button">Local static site</span></div>
  </div>
  <div class="series-list">
    {series_cards}
  </div>
  <div class="footer">Open a series to read chapters. Generated by generator.</div>
</div>
</body>
</html>
"""

def make_safe_filename(name: str):
    return re.sub(r'[^A-Za-z0-9_\-\. ]+', '_', name).strip()

def generate(site_out: Path, source: Path):
    ensure_dir(site_out)
    series_dirs = find_series(source)
    series_cards_html = []
    for sdir in series_dirs:
        series_name = sdir.name
        safe_series = make_safe_filename(series_name)
        series_out = site_out / safe_series
        ensure_dir(series_out)
        chapters = find_chapters(sdir)
        if not chapters: continue
        chapters_info = []
        for ch in chapters:
            chapter_name = ch.name if ch != sdir else 'chapter'
            safe_ch = make_safe_filename(chapter_name)
            ch_out = series_out / safe_ch
            imgs = list_images(ch)
            if not imgs: continue
            copied = copy_images(imgs, ch_out)
            chapters_info.append((chapter_name, safe_ch, ch_out, copied))
        for idx, (chapter_name, safe_ch, ch_out, copied) in enumerate(chapters_info):
            rel_to_series_index = os.path.relpath(series_out / 'index.html', ch_out)
            prev_link = f'<a class="button" href="{html.escape(chapters_info[idx-1][1])}/index.html">◀ Prev chapter</a>' if idx>0 else ''
            next_link = f'<a class="button" href="{html.escape(chapters_info[idx+1][1])}/index.html">Next chapter ▶</a>' if idx<len(chapters_info)-1 else ''
            prev_js = f'"{html.escape(chapters_info[idx-1][1])}/index.html"' if idx>0 else 'null'
            next_js = f'"{html.escape(chapters_info[idx+1][1])}/index.html"' if idx<len(chapters_info)-1 else 'null'
            images_html = '\n'.join([f'<img class="img-page" src="{html.escape(p.name)}" alt="{html.escape(p.name)}">' for p in copied])
            chapter_html = CHAPTER_HTML.format(series=html.escape(series_name), chapter_name=html.escape(chapter_name), css=BASE_CSS, images_html=images_html, series_index_rel=html.escape(rel_to_series_index), prev_chap_link=prev_link, next_chap_link=next_link, prev_chap_url_js=prev_js, next_chap_url_js=next_js)
            (ch_out / 'index.html').write_text(chapter_html, encoding='utf-8')
        chapters_li = '\n'.join([f'<li><a href="{html.escape(c[1])}/index.html">{html.escape(c[0])}</a> ({len(c[3])} pages)</li>' for c in chapters_info])
        series_index_html = SERIES_INDEX_HTML.format(series=html.escape(series_name), css=BASE_CSS, chapters_li=chapters_li, root_index_rel=os.path.relpath(site_out / 'index.html', series_out))
        (series_out / 'index.html').write_text(series_index_html, encoding='utf-8')
        series_cards_html.append(f'<a class="series-card" href="{html.escape(safe_series)}/index.html"><strong>{html.escape(series_name)}</strong><div style="font-size:0.9em;opacity:0.8">{len(chapters_info)} chapters</div></a>')
    root_html = ROOT_INDEX_HTML.format(css=BASE_CSS, series_cards='\n'.join(series_cards_html))
    (site_out / 'index.html').write_text(root_html, encoding='utf-8')
    print(f"Site generated to: {site_out.resolve()}")

def main():
    parser = argparse.ArgumentParser(description='Generate static vertical-scrolling webtoon site')
    parser.add_argument('--source', '-s', default='outputs/translated_chapter')
    parser.add_argument('--out', '-o', default='site_output')
    args = parser.parse_args()
    generate(Path(args.out), Path(args.source))

if __name__ == '__main__':
    main()
